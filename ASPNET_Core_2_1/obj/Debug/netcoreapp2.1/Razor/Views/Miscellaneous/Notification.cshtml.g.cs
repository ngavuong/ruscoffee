#pragma checksum "D:\RusCoffee\ASPNET_Core_2_1_Full_Project\ASPNET_Core_2_1\Views\Miscellaneous\Notification.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cdefd61e0378192202500c18e94671051bbb0bc4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Miscellaneous_Notification), @"mvc.1.0.view", @"/Views/Miscellaneous/Notification.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Miscellaneous/Notification.cshtml", typeof(AspNetCore.Views_Miscellaneous_Notification))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\RusCoffee\ASPNET_Core_2_1_Full_Project\ASPNET_Core_2_1\Views\_ViewImports.cshtml"
using ASPNET_Core_2_1;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cdefd61e0378192202500c18e94671051bbb0bc4", @"/Views/Miscellaneous/Notification.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"bf3ab1a3ff43760fcc2127914d0c3d050c712654", @"/Views/_ViewImports.cshtml")]
    public class Views_Miscellaneous_Notification : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/toastr/toastr.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("names", "Development", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/toastr/toastr.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("names", "Staging,Production", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/toastr/toastr.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/toastr/toastr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1, true);
            WriteLiteral("\n");
            EndContext();
#line 2 "D:\RusCoffee\ASPNET_Core_2_1_Full_Project\ASPNET_Core_2_1\Views\Miscellaneous\Notification.cshtml"
  
    ViewData["Title"] = "Notification";

#line default
#line hidden
            BeginContext(46, 220, true);
            WriteLiteral("\n<div class=\"row wrapper border-bottom white-bg page-heading\">\n    <div class=\"col-lg-10\">\n        <h2>Toastr notifications</h2>\n        <ol class=\"breadcrumb\">\n            <li class=\"breadcrumb-item\">\n                <a");
            EndContext();
            BeginWriteAttribute("href", " href=\"", 266, "\"", 313, 1);
#line 11 "D:\RusCoffee\ASPNET_Core_2_1_Full_Project\ASPNET_Core_2_1\Views\Miscellaneous\Notification.cshtml"
WriteAttributeValue("", 273, Url.Action("Dashboard_1", "Dashboards"), 273, 40, false);

#line default
#line hidden
            EndWriteAttribute();
            BeginContext(314, 11385, true);
            WriteLiteral(@">Home</a>
            </li>
            <li class=""breadcrumb-item"">
                <a>UI Elements</a>
            </li>
            <li class=""active breadcrumb-item"">
                <strong>Toastr notifications</strong>
            </li>
        </ol>
    </div>
    <div class=""col-lg-2"">

    </div>
</div>
<div class=""wrapper wrapper-content animated fadeIn"">
    <div class=""row"">
        <div class=""col-lg-12"">
            <div class=""ibox "">
                <div class=""ibox-title"">
                    <h5>Toastr examples</h5>
                    <div class=""ibox-tools"">
                        <a class=""collapse-link"">
                            <i class=""fa fa-chevron-up""></i>
                        </a>
                        <a class=""dropdown-toggle"" data-toggle=""dropdown"" href=""#"">
                            <i class=""fa fa-wrench""></i>
                        </a>
                        <ul class=""dropdown-menu dropdown-user"">
                            <li>
                                ");
            WriteLiteral(@"<a href=""#"" class=""dropdown-item"">Config option 1</a>
                            </li>
                            <li>
                                <a href=""#"" class=""dropdown-item"">Config option 2</a>
                            </li>
                        </ul>
                        <a class=""close-link"">
                            <i class=""fa fa-times""></i>
                        </a>
                    </div>
                </div>
                <div class=""ibox-content"">

                    <div class=""row"">
                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label for=""title"">Title</label>
                                <input id=""title"" type=""text"" class=""form-control"" placeholder=""Enter a title ..."" />
                            </div>
                            <div class=""form-group"">
                                <label for=""message"">Message</label>
                                <textarea class=""");
            WriteLiteral(@"form-control"" id=""message"" rows=""3"" placeholder=""Enter a message ...""></textarea>
                            </div>
                            <div class=""checkbox"">
                                <label class=""checkbox"" for=""closeButton"">
                                    <input id=""closeButton"" type=""checkbox"" value=""checked"" class=""input-mini"" checked />Close Button
                                </label>
                            </div>
                            <div class=""checkbox"">
                                <label class=""checkbox"" for=""addBehaviorOnToastClick"">
                                    <input id=""addBehaviorOnToastClick"" type=""checkbox"" value=""checked"" class=""input-mini"" />Add behavior on toast click
                                </label>
                            </div>
                            <div class=""checkbox"">
                                <label class=""checkbox"" for=""debugInfo"">
                                    <input id=""debugInfo"" type=""checkbox"" value=");
            WriteLiteral(@"""checked"" class=""input-mini"" />Debug
                                </label>
                            </div>
                            <div class=""checkbox"">
                                <label class=""checkbox"" for=""progressBar"">
                                    <input id=""progressBar"" type=""checkbox"" value=""checked"" class=""input-mini"" checked />Progress Bar
                                </label>
                            </div>
                            <div class=""checkbox"">
                                <label class=""checkbox"" for=""preventDuplicates"">
                                    <input id=""preventDuplicates"" type=""checkbox"" value=""checked"" class=""input-mini"" />Prevent Duplicates
                                </label>
                            </div>
                        </div>

                        <div class=""col-md-2"">
                            <div class=""form-group"" id=""toastTypeGroup"">
                                <label>Toast Type</label>
                   ");
            WriteLiteral(@"             <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""toasts"" value=""success"" checked />Success
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label class=""radio"">
                                        <input type=""radio"" name=""toasts"" value=""info"" />Info
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label class=""radio"">
                                        <input type=""radio"" name=""toasts"" value=""warning"" />Warning
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label class=""radio"">
                                        <input type=""radio"" nam");
            WriteLiteral(@"e=""toasts"" value=""error"" />Error
                                    </label>
                                </div>
                            </div>
                            <div class=""form-group"" id=""positionGroup"">
                                <label>Position</label>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-top-right"" checked />Top Right
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-bottom-right"" />Bottom Right
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input t");
            WriteLiteral(@"ype=""radio"" name=""positions"" value=""toast-bottom-left"" />Bottom Left
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-top-left"" />Top Left
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-top-full-width"" />Top Full Width
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-bottom-full-width"" />Bottom Full Width
                                    </label>
       ");
            WriteLiteral(@"                         </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-top-center"" />Top Center
                                    </label>
                                </div>
                                <div class=""radio"">
                                    <label>
                                        <input type=""radio"" name=""positions"" value=""toast-bottom-center"" />Bottom Center
                                    </label>
                                </div>
                            </div>
                        </div>

                        <div class=""col-md-2"">
                            <div class=""form-group"">
                                <label for=""showEasing"">Show Easing</label>
                                <input id=""showEasing"" type=""text"" placeholder=""swing, linear"" class=""form-control"" value=""swing"" />
                    ");
            WriteLiteral(@"        </div>
                            <div class=""form-group"">

                                <label for=""hideEasing"">Hide Easing</label>
                                <input id=""hideEasing"" type=""text"" placeholder=""swing, linear"" class=""form-control"" value=""linear"" />
                            </div>
                            <div class=""form-group"">

                                <label for=""showMethod"">Show Method</label>
                                <input id=""showMethod"" type=""text"" placeholder=""show, fadeIn, slideDown"" class=""form-control"" value=""fadeIn"" />
                            </div>
                            <div class=""form-group"">

                                <label for=""hideMethod"">Hide Method</label>
                                <input id=""hideMethod"" type=""text"" placeholder=""hide, fadeOut, slideUp"" class=""form-control"" value=""fadeOut"" />
                            </div>
                        </div>

                        <div class=""col-md-3"">
             ");
            WriteLiteral(@"               <div class=""form-group"">
                                <label for=""showDuration"">Show Duration</label>
                                <input id=""showDuration"" type=""text"" placeholder=""ms"" class=""form-control"" value=""400"" />
                            </div>
                            <div class=""form-group"">
                                <label for=""hideDuration"">Hide Duration</label>
                                <input id=""hideDuration"" type=""text"" placeholder=""ms"" class=""form-control"" value=""1000"" />
                            </div>
                            <div class=""form-group"">
                                <label for=""timeOut"">Time out</label>
                                <input id=""timeOut"" type=""text"" placeholder=""ms"" class=""form-control"" value=""7000"" />
                            </div>
                            <div class=""form-group"">
                                <label for=""extendedTimeOut"">Extended time out</label>
                                <input i");
            WriteLiteral(@"d=""extendedTimeOut"" type=""text"" placeholder=""ms"" class=""form-control"" value=""1000"" />
                            </div>
                        </div>
                    </div>

                    <div class=""row"">
                        <div class=""col-lg-12"">
                            <button type=""button"" class=""btn btn-primary"" id=""showtoast"">Show Toast</button>
                            <button type=""button"" class=""btn btn-white"" id=""cleartoasts"">Clear Toasts</button>
                            <button type=""button"" class=""btn btn-white"" id=""clearlasttoast"">Clear Last Toast</button>
                            <button type=""button"" class=""btn btn-white"" id=""showsimple"">Show simple options</button>
                        </div>
                    </div>

                    <div class=""row m-t-lg"">
                        <div class=""col-lg-12"">
                            <small>Toastr Options in JSON</small>
                            <pre id=""toastrOptions"" class=""p-m""></pre>
              ");
            WriteLiteral("          </div>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n");
            EndContext();
            DefineSection("Styles", async() => {
                BeginContext(11716, 5, true);
                WriteLiteral("\n    ");
                EndContext();
                BeginContext(11721, 117, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e714691facb749dbbd01b1444f70daa2", async() => {
                    BeginContext(11754, 9, true);
                    WriteLiteral("\n        ");
                    EndContext();
                    BeginContext(11763, 56, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5252640f2a38488c8b70697246332787", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(11819, 5, true);
                    WriteLiteral("\n    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Names = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11838, 5, true);
                WriteLiteral("\n    ");
                EndContext();
                BeginContext(11843, 128, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "feb8de19255d4efa8942c85d531814a5", async() => {
                    BeginContext(11883, 9, true);
                    WriteLiteral("\n        ");
                    EndContext();
                    BeginContext(11892, 60, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6acc15807c274303937da55a42bf426a", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(11952, 5, true);
                    WriteLiteral("\n    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Names = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(11971, 1, true);
                WriteLiteral("\n");
                EndContext();
            }
            );
            BeginContext(11974, 1, true);
            WriteLiteral("\n");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(11993, 5, true);
                WriteLiteral("\n    ");
                EndContext();
                BeginContext(11998, 107, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9fc10e3fead54909bd1e9a3602680c09", async() => {
                    BeginContext(12031, 9, true);
                    WriteLiteral("\n        ");
                    EndContext();
                    BeginContext(12040, 46, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8b4985edb7bc4d6db29b09d365e2f4de", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(12086, 5, true);
                    WriteLiteral("\n    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Names = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(12105, 5, true);
                WriteLiteral("\n    ");
                EndContext();
                BeginContext(12110, 118, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("environment", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "909ff85081f84d0581c22c10906aa3c2", async() => {
                    BeginContext(12150, 9, true);
                    WriteLiteral("\n        ");
                    EndContext();
                    BeginContext(12159, 50, false);
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dcd73f51ab2449a198b1ec36fde8cd7e", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    EndContext();
                    BeginContext(12209, 5, true);
                    WriteLiteral("\n    ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.EnvironmentTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_EnvironmentTagHelper.Names = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(12228, 4549, true);
                WriteLiteral(@"

    <script type=""text/javascript"">
        $(document).ready(function () {

            var i = -1;
            var toastCount = 0;
            var $toastlast;
            var getMessage = function () {
                var msg = 'Hi, welcome to Inspinia. This is example of Toastr notification box.';
                return msg;
            };

            $('#showsimple').click(function () {
                // Display a success toast, with a title
                toastr.success('Without any options', 'Simple notification!')
            });
            $('#showtoast').click(function () {
                var shortCutFunction = $(""#toastTypeGroup input:radio:checked"").val();
                var msg = $('#message').val();
                var title = $('#title').val() || '';
                var $showDuration = $('#showDuration');
                var $hideDuration = $('#hideDuration');
                var $timeOut = $('#timeOut');
                var $extendedTimeOut = $('#extendedTimeOut');
                var $");
                WriteLiteral(@"showEasing = $('#showEasing');
                var $hideEasing = $('#hideEasing');
                var $showMethod = $('#showMethod');
                var $hideMethod = $('#hideMethod');
                var toastIndex = toastCount++;
                toastr.options = {
                    closeButton: $('#closeButton').prop('checked'),
                    debug: $('#debugInfo').prop('checked'),
                    progressBar: $('#progressBar').prop('checked'),
                    positionClass: $('#positionGroup input:radio:checked').val() || 'toast-top-right',
                    onclick: null
                };
                if ($('#addBehaviorOnToastClick').prop('checked')) {
                    toastr.options.onclick = function () {
                        alert('You can perform some custom action after a toast goes away');
                    };
                }
                if ($showDuration.val().length) {
                    toastr.options.showDuration = $showDuration.val();
                }
  ");
                WriteLiteral(@"              if ($hideDuration.val().length) {
                    toastr.options.hideDuration = $hideDuration.val();
                }
                if ($timeOut.val().length) {
                    toastr.options.timeOut = $timeOut.val();
                }
                if ($extendedTimeOut.val().length) {
                    toastr.options.extendedTimeOut = $extendedTimeOut.val();
                }
                if ($showEasing.val().length) {
                    toastr.options.showEasing = $showEasing.val();
                }
                if ($hideEasing.val().length) {
                    toastr.options.hideEasing = $hideEasing.val();
                }
                if ($showMethod.val().length) {
                    toastr.options.showMethod = $showMethod.val();
                }
                if ($hideMethod.val().length) {
                    toastr.options.hideMethod = $hideMethod.val();
                }
                if (!msg) {
                    msg = getMessage();
               ");
                WriteLiteral(@" }
                $(""#toastrOptions"").text(""Command: toastr[""
                        + shortCutFunction
                        + ""](\""""
                        + msg
                        + (title ? ""\"", \"""" + title : '')
                        + ""\"")\n\ntoastr.options = ""
                        + JSON.stringify(toastr.options, null, 2)
                );
                var $toast = toastr[shortCutFunction](msg, title); // Wire up an event handler to a button in the toast, if it exists
                $toastlast = $toast;
                if ($toast.find('#okBtn').length) {
                    $toast.delegate('#okBtn', 'click', function () {
                        alert('you clicked me. i was toast #' + toastIndex + '. goodbye!');
                        $toast.remove();
                    });
                }
                if ($toast.find('#surpriseBtn').length) {
                    $toast.delegate('#surpriseBtn', 'click', function () {
                        alert('Surprise! you clicked me. i ");
                WriteLiteral(@"was toast #' + toastIndex + '. You could perform an action here.');
                    });
                }
            });
            function getLastToast() {
                return $toastlast;
            }
            $('#clearlasttoast').click(function () {
                toastr.clear(getLastToast());
            });
            $('#cleartoasts').click(function () {
                toastr.clear();
            });

        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
